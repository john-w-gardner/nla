Descriptions of functions 

matops.c:

void matmat(double A[], int am, int an,
            double B[], int bm, int bn, 
            double (*C)[], int cm, int cn)

Multiply matrices A (size am by an) and B (size bm by bn) and put result in matrix C (size cm by cn). 

- 

void matvec(double A[], int am, int an,
            double x[], int xn,
            double (*b)[])

Matrix times vector, like matmat, but with fewer dimensions to be specified. 

- 

void printmat(double A[], int m, int n)

Print matrix, for testing purposes. 

-

double dotprod(double x[], double y[], int n)

Dot product between vectors x and y. 

-

double eucnorm(double x[], int n)

Euclidean 2-norm, i.e. ||x||_2 i.e. \sqrt{\sum x_i}.

-


double eucmetric(double x[], double y[], int n)

euclidean metric, i.e. ||x-y||_2

-

void addVec(double (*u)[], double v[], int n)

Add n-length vectors u and v, store result in u (overwrite).

-

void scaleVec(double (*x)[], double a, int n)

Scale n-length vector x by a. 

-

void updateCol(double (*A)[], int m, int n, int i, double v[])

insert length m vector v into column i of matrix A 

-

void transpose1(double A[], int m, int n, double (*At)[])

Transpose matrix A, store in At.

- 

double extractEntry(double A[], int m, int n, int i, int j)

Extract (return) the row i, column j entry from matrix A. 

-

void extractColumn(double A[], int m, int n, int j, double (*v)[])

Extract column j of A, store in vector v. 

-

void extractRow(double A[], int m, int n, int j, double (*v)[])

Extract row j of A, store in vector v. 

-

void updateEntry(double x, double (*A)[], int m, int n, int i, int j)

Write value of x into A at row i, column j. 

-

double printMax(double v[], int n)

Print maximum entry of vector

-

void sign(double x)

returns the sign of x. 
-1 if x < 1, 1 if x >= 1

-

void submat(double A[], int m, int n, int i1, int i2, int j1, int j2,double (*As)[])

Matrix slicing. 
Extract rows i1 up to but not including i2, and columns j1 up to but not including j2.
Insert into As. 

-

void insertSubmat(double (*A)[], int m, int n, int i1, int i2, int j1, int j2, 
                  double As[]);

Insert (i2-i1) by (j2-j1) matrix As into A. 
First column of As to replace the i1-th column of A, first row with j1. 

---------------------

qrSolve.c:

void qrSolve(double A[], int n, double (*x)[], double b[])

Solves n by n linear system Ax=b via (modified) Gram Schmidt QR factorization. 
Stores result in x.

-

void backsub(double A[], int n, double b[], double (*x)[])

Given n \times n upper triangular matrix A and RHS b, solve Ax=b for x.
Store result in x. 

-

void qrGS1(double A[], int m, int n, double (*Q)[], double (*R)[])

Compute QR factorization A=QR, where A is m by n, Q is m by n, R is n by n. 
Uses classical Gram-Schmidt

-

void qrGS2(double A[], int m, int n, double (*Q)[], double (*R)[]) 

Compute QR factorization A=QR, where A is m by n, Q is m by n, R is n by n. 
Uses modified Gram-Schmidt for improved numerical stability

-

void cholFac(double A[], int m, double (*R)[])

Given symmetric positive definite matrix A, 
compute cholesky factorization A=R'R

-

void qrHH(double A[], int m, int n, double (*Q)[], double (*R)[]);

full QR factorization via Householder reflectors. 
Q must have size m \times m and R must have size m \times n.

-

